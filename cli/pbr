#!/usr/bin/env python2
"""
Client for the progressbr web service.
"""
import argparse
import logging
import json
import requests
import os

BASE_URL = "%s/api"


def create(range_min=0, range_max=None, description=None, private_key=None):
    url = "%s/progress" % (BASE_URL)
    headers = {'Content-Type': 'application/json' }

    if private_key is None:
        private_key = os.environ.get('PBR_PRIVATE_KEY', None)
    if private_key is not None:
        headers['Authorization'] = 'PBR %s' % private_key

    data = {}
    if range_min is not None:
        data['range_min'] = range_min
    if range_max is not None:
        data['range_max'] = range_max
    if description is not None:
        data['description'] = description

    r = requests.post(url, json.dumps(data), headers=headers)
    logging.debug('response headers: %s', r.headers)
    logging.debug('response content: %s', r.content)

    if r.status_code == 201:
        print json.loads(r.content)['uuid']
    else:
        print r.content

def create_wrapper(args):
    create(args.range_min, args.range_max, description=args.description)


def update(uuid, n_min=None, n_max=None, description=None):
    url = "%s/progressupdate" % (BASE_URL)
    headers = {'Content-Type': 'application/json' }

    data = {
        'progress_id': uuid,
    }
    if n_min is not None:
        data['n_min'] = n_min
    if n_max is not None:
        data['n_max'] = n_max
    if description is not None:
        data['description'] = description

    r = requests.post(url, json.dumps(data), headers=headers)
    if r.status_code != 201:
        print r.content

def update_wrapper(args):
    update(args.uuid, args.n_min, args.n_max, description=args.description)


if __name__ == "__main__":
    logging.basicConfig(level=logging.WARNING)

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-b', '--base-url', type=str, help='base url', default='http://progressbr.herokuapp.com')
    subparsers = parser.add_subparsers(help='sub-command help')

    parser_create = subparsers.add_parser('create', help='create new progress bar')
    parser_create.add_argument('-d', '--description', type=str, help='description', default=None)
    parser_create.add_argument('-k', '--private-key', type=str, help='private user key', default=None)
    parser_create.add_argument('range_min',           type=int, nargs='?', help='range min')
    parser_create.add_argument('range_max',           type=int,            help='range max')
    parser_create.set_defaults(func=create_wrapper)

    parser_update = subparsers.add_parser('update', help='update progress bar')
    parser_update.add_argument('-d', '--description', type=str, help='description')
    parser_update.add_argument('uuid',                type=str, help='progress bar identifier')
    parser_update.add_argument('n_min',           type=int, nargs='?', help='update min')
    parser_update.add_argument('n_max',           type=int,            help='update max')
    parser_update.set_defaults(func=update_wrapper)

    args = parser.parse_args()

    # update base url
    BASE_URL = BASE_URL % args.base_url
    if not BASE_URL.startswith('http://'):
        BASE_URL = 'http://' + BASE_URL

    args.func(args)


